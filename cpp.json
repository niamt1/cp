{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Boielrplate for multiple test cases": {
		"prefix": "tboilerplate",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"using namespace __gnu_pbds;",
			"typedef tree<int,null_type,less<int>,rb_tree_tag,",
			"tree_order_statistics_node_update> ordered_set;",
			"#define ll long long",
			"#define all(v) v.begin(),v.end()",
			"#define mod (ll)(1e9+7)",
			"",
			"",
			"int main(){",
			"    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
			"    ll t;",
			"    cin >> t;",
			"    while(t--){",
			"        $0",
			"        ",
			"    }",
			"    return 0;",
			"}"
		],
		"description": "Boielrplate for multiple test cases"
	},
	"Boielrplate for single test cases": {
		"prefix": "boilerplate",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"using namespace __gnu_pbds;",
			"typedef tree<int,null_type,less<int>,rb_tree_tag,",
			"tree_order_statistics_node_update> ordered_set;",
			"#define ll long long",
			"#define all(v) v.begin(),v.end()",
			"#define mod (ll)(1e9+7)",
			"",
			"",
			"int main(){",
			"    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
			"    $0",
			"    ",
			"    return 0;",
			"}"
		],
		"description": "Boielrplate for single test cases"
	},
	"Calculating Binomial Coefficient(nCr)": {
		"prefix": "ncr/binomial_coefficient",
		"body": [
			"long long power(long long a, long long b) {",
			"    long long result = 1;",
			"    while (b > 0) {",
			"        if (b % 2 == 1) {",
			"            result = (result * a) % mod;",
			"        }",
			"        a = (a * a) % mod;",
			"        b /= 2;",
			"    }",
			"    return result;",
			"}",
			"long long inverse(long long a) {",
			"    return power(a, mod - 2);",
			"}",
			"long long binomial_coefficient(vector<ll> &factorial, int n, int k) {",
			"    return factorial[n] * inverse(factorial[k] * factorial[n - k] % mod) % mod;",
			"}",
			"// https://cp-algorithms.com/combinatorics/binomial-coefficients.html#computing-binomial-coefficients-modulo-m",
			"// Paste the below code inside main() and change \"MAXN\"",
			"// int MAXN = 1e6;",
			"// vector<ll> factorial(MAXN + 1);",
			"// factorial[0] = 1;",
			"// for (int i = 1; i <= MAXN; i++) {",
			"//     factorial[i] = factorial[i - 1] * i % mod;",
			"// }"
		],
		"description": "Calculating Binomial Coefficient(nCr)"
	},
	"Prime factorisation of a number upto 10^12 in sqrt(n) time": {
		"prefix": "primeFactors",
		"body": [
			"vector<ll> primeFactors(ll n){",
			"    vector<ll> factors;",
			"    for(ll i = 2; i*i <= n; i++){",
			"        while(n%i == 0){",
			"            factors.push_back(i);",
			"            n /= i;",
			"        }",
			"    }",
			"    if(n > 1) factors.push_back(n);",
			"    return factors;",
			"}"
		],
		"description": "Prime factorisation of a number upto 10^12 in sqrt(n) time"
	},
	"Eratosthenes sieve for both only prime check and smallest prime factor(SPF) for factorization": {
		"prefix": "sieve",
		"body": [
			"const int N = 1e6 + 5;",
			"",
			"vector<int> primes;",
			"bool is_prime[N];",
			"void sieveF(){",
			"    for(int i = 2; i < N; i++){",
			"        is_prime[i] = true;",
			"    }",
			"    for(int i = 2; i*i < N; i++){",
			"        if(!is_prime[i]) continue;",
			"        for(int j = i*i; j < N; j += i){",
			"            is_prime[j] = false;",
			"        }",
			"    }",
			"    for(int i = 2; i < N; i++){",
			"        if(is_prime[i]) primes.push_back(i);",
			"    }",
			"}",
			"",
			"int spf[N];",
			"void sieveSPF(){",
			"    for(int i = 2; i < N; i++){",
			"        spf[i] = i;",
			"    }",
			"    for(int i = 2; i*i < N; i++){",
			"        if(spf[i] != i) continue;",
			"        for(int j = i*i; j < N; j += i){",
			"            spf[j] = min(spf[j], i);",
			"        }",
			"    }",
			"    for(int i = 2; i < N; i++){",
			"        if(spf[i] == i) primes.push_back(i);",
			"    }",
			"}"
		],
		"description": "Eratosthenes sieve for both only prime check and smallest prime factor(SPF) for factorization"
	},
	"Disjoint set union": {
	"prefix": "dsu/DSU",
	"body": [
		"struct DSU{",
		"    vector<int> link, size;",
		"    int n;",
		"    DSU(int N){",
		"        n = N;",
		"        link.resize(n+1);",
		"        size.resize(n+1);",
		"        for (int i = 1; i <= n; i++) link[i] = i;",
		"        for (int i = 1; i <= n; i++) size[i] = 1;",
		"    }",
		"    ",
		"    int find(int x) {",
		"        while (x != link[x]) x = link[x];",
		"        return x;",
		"    }",
		"    bool same(int a, int b) {",
		"        return find(a) == find(b);",
		"    }",
		"    void unite(int a, int b) {",
		"        a = find(a);",
		"        b = find(b);",
		"        if (size[a] < size[b]) swap(a,b);",
		"        size[a] += size[b];",
		"        link[b] = a;",
		"    }",
		"};"
	],
	"description": "Disjoint set union"
	}
}
